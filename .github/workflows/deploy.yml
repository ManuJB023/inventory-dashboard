# .github/workflows/deploy.yml

name: Deploy Inventory Dashboard

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: inventory-dashboard

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run backend tests
        run: |
          cd backend
          npm test
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --passWithNoTests
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage
      
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
      
      - name: Lint backend
        run: |
          cd backend
          npm run lint
      
      - name: Lint frontend
        run: |
          cd frontend
          npm run lint
  
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -no-color -var="db_password=${{ secrets.DB_PASSWORD }}"
        continue-on-error: true
      
      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6
          terraform_wrapper: false
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Infrastructure
        run: |
          cd terraform
          terraform init
          terraform plan -var="db_password=${{ secrets.DB_PASSWORD }}" -var="environment=dev"
          terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}" -var="environment=dev"
      
      - name: Get ECR Repository URLs
        id: ecr
        run: |
          cd terraform
          echo "frontend_repo=$(terraform output -raw frontend_ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "backend_repo=$(terraform output -raw backend_ecr_repository_url)" >> $GITHUB_OUTPUT
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push backend image
        run: |
          docker build -t ${{ steps.ecr.outputs.backend_repo }}:${{ github.sha }} -f backend/Dockerfile backend/
          docker push ${{ steps.ecr.outputs.backend_repo }}:${{ github.sha }}
      
      - name: Build and push frontend image
        run: |
          docker build -t ${{ steps.ecr.outputs.frontend_repo }}:${{ github.sha }} -f frontend/Dockerfile frontend/
          docker push ${{ steps.ecr.outputs.frontend_repo }}:${{ github.sha }}
      
      - name: Update ECS services
        run: |
          cd terraform
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
          FRONTEND_SERVICE=$(terraform output -raw frontend_service_name)
          BACKEND_SERVICE=$(terraform output -raw backend_service_name)
          
          # Update task definitions with new image tags
          aws ecs update-service --cluster $CLUSTER_NAME --service $BACKEND_SERVICE --force-new-deployment
          aws ecs update-service --cluster $CLUSTER_NAME --service $FRONTEND_SERVICE --force-new-deployment
          
          # Wait for services to stabilize
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $BACKEND_SERVICE
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $FRONTEND_SERVICE
      
      - name: Run database migrations
        run: |
          cd terraform
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
          BACKEND_SERVICE=$(terraform output -raw backend_service_name)
          
          # Get a running task ARN
          TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $BACKEND_SERVICE --query 'taskArns[0]' --output text)